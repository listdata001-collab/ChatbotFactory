BotFactory AI Platformasiga audio xabarlarni qayta ishlash funksiyasini qo'shing. Bunda Google Cloud Speech-to-Text emas, Google Gemini API 2.5 Flash dan foydalaning:

Funksiya tavsifi:

Foydalanuvchi Telegram/Instagram/WhatsApp orqali audio xabar yuborsa
Audio faylni serverga yuklash
Audio faylni Google Gemini API 2.5 Flash yordamida to'g'ridan-to'g'ri matnga o'girish
Olingan matn asosida Gemini AI dan javob olish
Javobni foydalanuvchiga text formatda yuborish
Iltimos, quyidagi fayllarga kerakli o'zgarishlarni kiritib bering:

telegram_bot.py - audio xabar qabul qilish
instagram_bot.py - audio xabar qabul qilish
whatsapp_bot.py - audio xabar qabul qilish
audio_processor.py - yangi fayl yaratish (Gemini orqali audio to text + AI javob)
requirements.txt - kerakli kutubxonalar (agar kerak bo'lsa)
Har bir faylni tushuntirib yozing. Kodni to'liq, ishlashga tayyor holatda bering." 

üéß Gemini API orqali Audio Processing
Yangi fayl: audio_processor.py
python


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
import os
import io
import logging
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold

logger = logging.getLogger(__name__)

# Gemini API konfiguratsiyasi
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
genai.configure(api_key=GEMINI_API_KEY)

def process_audio_message_with_gemini(audio_file_path, user_id, platform="telegram"):
    """
    Audio faylni Gemini API yordamida matnga o'girish va AI javob berish
    """
    try:
        # 1. Audio faylni o'qish
        with open(audio_file_path, 'rb') as audio_file:
            audio_data = audio_file.read()
        
        # 2. Gemini API modelini sozlash
        model = genai.GenerativeModel('gemini-2.5-flash')
        
        # 3. Audio faylni matnga o'girish
        prompt = "Bu audio xabarni transkripsiya qiling va faqat matnni qaytaring:"
        
        response = model.generate_content([
            prompt,
            {
                'mime_type': 'audio/ogg',
                'data': audio_data
            }
        ], safety_settings={
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE
        })
        
        # Transkripsiya matni
        transcribed_text = response.text.strip()
        
        if not transcribed_text:
            return "‚ùå Audio faylni tushunib bo'lmadi. Iltimos, aniqroq gapiring! üé§"
        
        # 4. AI javob olish
        ai_response = get_gemini_response(transcribed_text, user_id, platform)
        
        return ai_response
        
    except Exception as e:
        logger.error(f"Gemini audio processingda xato: {str(e)}")
        return "‚ùå Audio xabarni qayta ishlashda xatolik yuz berdi! üéµ"

def get_gemini_response(user_message, user_id, platform="telegram"):
    """
    Gemini API orqali AI javob olish
    """
    try:
        # Foydalanuvchi tilini aniqlash (sizning tizimingizdan oling)
        user_language = get_user_language(user_id, platform)
        
        # Tizim buyrug'i
        system_prompt = f"""
        Sen BotFactory AI chatbotsan. 
        Har doim {user_language} tilida javob bering.
        Dostona, foydali va emotsiyalik bo'ling. Emoji ishlating.
        Markdown formatini ishlamang, faqat oddiy matn.
        """
        
        # Gemini model
        model = genai.GenerativeModel('gemini-2.5-flash')
        
        # Javob olish
        response = model.generate_content([
            system_prompt,
            user_message
        ])
        
        return response.text.strip()
        
    except Exception as e:
        logger.error(f"Gemini javob olishda xato: {str(e)}")
        return "‚ùå Kechirasiz, javob berishda xatolik yuz berdi! ü§ñ"

def get_user_language(user_id, platform):
    """
    Foydalanuvchi tilini aniqlash (sizning database dan oling)
    """
    # Bu yerda sizning database logikangiz bo'ladi
    # Hozircha default qiymat
    return "o'zbek"  # yoki "rus", "ingliz"
ü§ñ Telegram Botga audio qo'shish
telegram_bot.py ga quyidagilarni qo'shing:
python


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
‚åÑ
‚åÑ
‚åÑ
‚åÑ
import tempfile
import os
from audio_processor import process_audio_message_with_gemini

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ovozli xabarlarni Gemini API orqali qayta ishlash"""
    try:
        logger.info(f"Ovozli xabar qabul qilindi foydalanuvchi: {update.message.from_user.id}")
        
        # Audio faylni yuklash
        voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)
        
        # Vaqtincha fayl yaratish
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            await file.download_to_memory(temp_file)
            temp_file_path = temp_file.name
        
        # Audio faylni Gemini API orqali qayta ishlash
        user_id = update.message.from_user.id
        response = process_audio_message_with_gemini(temp_file_path, user_id, "telegram")
        
        # Javob yuborish
        await update.message.reply_text(response)
        
        # Vaqtincha faylni o'chirish
        os.unlink(temp_file_path)
        
        logger.info(f"Ovozli xabar qayta ishlandi foydalanuvchi: {user_id}")
        
    except Exception as e:
        logger.error(f"Ovozli xabarni qayta ishlashda xato: {str(e)}")
        await update.message.reply_text("‚ùå Ovozli xabarni qayta ishlashda xatolik yuz berdi! üéµ")

# Handler qo'shish (avvalgi voice handler ustidan yozish kerak)
app.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
üì± Instagram va WhatsApp uchun audio
instagram_bot.py va whatsapp_bot.py ga quyidagilarni qo'shing:
python


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
‚åÑ
‚åÑ
‚åÑ
‚åÑ
import requests
import tempfile
import os
from audio_processor import process_audio_message_with_gemini

def handle_audio_message(sender_id, audio_url, platform="instagram"):
    """Audio xabarni Gemini API orqali qayta ishlash"""
    try:
        logger.info(f"Audio xabar qabul qilindi foydalanuvchi: {sender_id}")
        
        # Audio faylni yuklash
        response = requests.get(audio_url)
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            temp_file.write(response.content)
            temp_file_path = temp_file.name
        
        # Audio faylni Gemini API orqali qayta ishlash
        response_text = process_audio_message_with_gemini(temp_file_path, sender_id, platform)
        
        # Javob yuborish
        send_message(sender_id, response_text)
        
        # Vaqtincha faylni o'chirish
        os.unlink(temp_file_path)
        
        logger.info(f"Audio xabar qayta ishlandi foydalanuvchi: {sender_id}")
        
    except Exception as e:
        logger.error(f"{platform} audio processingda xato: {str(e)}")
        send_message(sender_id, "‚ùå Audio xabarni qayta ishlashda xatolik yuz berdi! üéµ")
üì¶ Requirements.txt da o'zgarish kerakmi?
Agar google-generativeai allaqachon bo'lsa, hech narsa qo'shish shart emas:

txt


1
google-generativeai==0.8.0
